package com.vip.pallas.search.timeout;

import static org.mockito.Mockito.mock;

import com.vip.pallas.search.exception.PallasTimeoutException;
import com.vip.pallas.search.filter.base.FilterContext;
import com.vip.pallas.search.filter.common.SessionContext;
import com.vip.pallas.search.filter.rest.RestResponseHeaderFilter;
import com.vip.pallas.search.model.ServiceInfo;
import com.vip.pallas.search.model.ShardGroup;
import com.vip.pallas.search.monitor.MonitorAccessLog;
import com.vip.pallas.search.netty.http.NettyPallasRequest;
import com.vip.pallas.search.trace.TraceAspect;

import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
import io.netty.handler.codec.DecoderResult;
import io.netty.handler.codec.http.DefaultFullHttpRequest;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpMethod;
import io.netty.handler.codec.http.HttpVersion;

import java.util.ArrayList;
import java.util.HashMap;

import org.apache.http.HttpHost;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.protocol.HttpContext;
import org.junit.Test;

/**
 * Unit tests for com.vip.pallas.search.timeout.TimeoutRetryController
 *
 * @author Diffblue Cover
 */

public class TimeoutRetryControllerTest {

	@Test
	public void factory() {
		// pojo TimeoutRetryController
	}

	@Test
	public void start() {
		TimeoutRetryController.start();
	}

	@Test
	public void addRequest() {
		CloseableHttpAsyncClient httpClient = mock(CloseableHttpAsyncClient.class);
		SessionContext sessionContext = new SessionContext();
		Channel inBoundChannel = mock(Channel.class);
		sessionContext.setInBoundChannel(inBoundChannel);
		MonitorAccessLog monitorAccessLog = new MonitorAccessLog();
		monitorAccessLog.setRequestBody("/some/path.html");
		sessionContext.setMonitorAccessLog(monitorAccessLog);
		sessionContext.setOspRequestBodyJson("\"foo\"");
		HashMap<String, String> ospRequestHeader = new HashMap<String, String>();
		ospRequestHeader.put("foo", "foo");
		sessionContext.setOspRequestHeader(ospRequestHeader);
		sessionContext.setPrintExceStackInfo(false);
		FullHttpRequest httpRequest1 = mock(FullHttpRequest.class);
		Channel channel1 = mock(Channel.class);
		NettyPallasRequest request = new NettyPallasRequest(httpRequest1, channel1);
		request.setCircuitBreaker(false);
		byte[] fixContent1 = new byte[] { 1 };
		request.setFixScrollRequestContent(fixContent1);
		request.setIsIndexSearch(false);
		request.setLogicClusterId("/some/path.html");
		request.setPreference("/some/path.html");
		request.setRoutePrimaryFirst(false);
		request.setRouteReplicaFirst(false);
		request.setScrollContinue(false);
		request.setScrollFirst(false);
		request.setShardGroupList(new ArrayList<ShardGroup>());
		request.setTargetGroupId(1L);
		sessionContext.setRequest(request);
		sessionContext.setRequestCallBack("/some/path.html");
		sessionContext.setResponseBody(Unpooled.directBuffer());
		HttpHeaders responseHttpHeaders = mock(HttpHeaders.class);
		sessionContext.setResponseHttpHeaders(responseHttpHeaders);
		sessionContext.setResponseHttpVersion(new HttpVersion("HTTP/1.1", 1, 1, false));
		FullHttpResponse restFullHttpResponse = mock(FullHttpResponse.class);
		sessionContext.setRestFullHttpResponse(restFullHttpResponse);
		sessionContext.setRestRequestBody(Unpooled.directBuffer());
		sessionContext.setRestRequestUri("/some/path.html");
		ServiceInfo serviceInfo1 =
			 new ServiceInfo("280 Broadway", "Acme", "John Smith", "Mr");
		serviceInfo1.setBackendAddress("280 Broadway");
		serviceInfo1.setClusterName("John Smith");
		serviceInfo1.setIndexName("Acme");
		sessionContext.setServiceInfo(serviceInfo1);
		ArrayList<ServiceInfo> serviceInfoList = new ArrayList<ServiceInfo>();
		ServiceInfo serviceInfo2 =
			 new ServiceInfo("280 Broadway", "Smith", "John Smith", "Mr");
		serviceInfo2.setBackendAddress("280 Broadway");
		serviceInfo2.setClusterName("John Smith");
		serviceInfo2.setIndexName("Acme");
		serviceInfoList.add(serviceInfo2);
		sessionContext.setServiceInfoList(serviceInfoList);
		sessionContext.setThrowable(new PallasTimeoutException());
		sessionContext.setTimestampClientConnected(1L);
		sessionContext.setTimestampClientResponseRead(1L);
		sessionContext.setTimestampClientResponseReceived(1L);
		sessionContext.setTimestampClientStartExecute(1L);
		sessionContext.setTimestampServerChannelRead(1L);
		sessionContext.setTimestampServerResponseSend(1L);
		TraceAspect TraceAspect1 = mock(TraceAspect.class);
		sessionContext.setTraceAspect(TraceAspect1);
		DefaultFullHttpRequest outBoundRequest =
			 new DefaultFullHttpRequest(new HttpVersion("HTTP/1.1", 1, 1, false), new HttpMethod("/some/path.html"), "/some/path.html");
		outBoundRequest.setDecoderResult(DecoderResult.failure(new PallasTimeoutException()));
		HttpContext httpContext = mock(HttpContext.class);
		FullHttpRequest httpRequest2 = mock(FullHttpRequest.class);
		Channel channel2 = mock(Channel.class);
		NettyPallasRequest pallasRequest =
			 new NettyPallasRequest(httpRequest2, channel2);
		pallasRequest.setCircuitBreaker(false);
		byte[] fixContent2 = new byte[] { 1 };
		pallasRequest.setFixScrollRequestContent(fixContent2);
		pallasRequest.setIsIndexSearch(false);
		pallasRequest.setLogicClusterId("/some/path.html");
		pallasRequest.setPreference("/some/path.html");
		pallasRequest.setRoutePrimaryFirst(false);
		pallasRequest.setRouteReplicaFirst(false);
		pallasRequest.setScrollContinue(false);
		pallasRequest.setScrollFirst(false);
		ArrayList<String> ipAndPortList1 = new ArrayList<String>();
		ipAndPortList1.add("foo");
		ShardGroup shardGroup1 = new ShardGroup("foo", ipAndPortList1, "Acme");
		shardGroup1.setId("1234");
		shardGroup1.setIndexName("Acme");
		shardGroup1.setPreferNodes("foo");
		ArrayList<String> serverList1 = new ArrayList<String>();
		serverList1.add("foo=bar");
		shardGroup1.setServerList(serverList1);
		pallasRequest.setShardGroup(shardGroup1);
		ArrayList<ShardGroup> groupList2 = new ArrayList<ShardGroup>();
		ArrayList<String> ipAndPortList2 = new ArrayList<String>();
		ipAndPortList2.add("Smith");
		ShardGroup shardGroup2 = new ShardGroup("Smith", ipAndPortList2, "Smith");
		shardGroup2.setId("1234");
		shardGroup2.setIndexName("Acme");
		shardGroup2.setPreferNodes("foo");
		ArrayList<String> serverList2 = new ArrayList<String>();
		serverList2.add("foo=bar");
		shardGroup2.setServerList(serverList2);
		groupList2.add(shardGroup2);
		pallasRequest.setShardGroupList(groupList2);
		pallasRequest.setTargetGroupId(1L);
		TimeoutRetryController.addRequest(new AsyncCall(httpClient, new TryPolicy(1, 1), new HttpHost("/some/path.html"), "/some/path.html", "1234", new FilterContext(new RestResponseHeaderFilter()), sessionContext, outBoundRequest, httpContext, pallasRequest));
	}

	@Test
	public void notifyGovernor() {
		TimeoutRetryController.notifyGovernor();
	}

	@Test
	public void stop() {
		TimeoutRetryController.stop();
	}
}
